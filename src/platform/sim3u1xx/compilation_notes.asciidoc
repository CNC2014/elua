Compilation Notes
=================

Silicon Labs HAL
----------------

In order to compile for this platform, it is currently necessary to copy the
"si32Hal" directory from within "C:\Silabs\32bit\si32-1.0\" to this directory
("sim3u1xx"). This is necessary until licensing is less restrictive on these
components.

General Build Requirements
--------------------------

In addition standard necessities for building eLua also apply:

* an *arm-eabi toolchain*

** the Precision32 IDE works, see "build_sim3u_dk.cmd" and
   "build_sim3u_gs.cmd" for an example of how to run the build from
   the command line

* *Lua* with the requisite modules for driving the build system. (check the top
  of build_elua.lua for requirements)

** LuaForWindows includes all the needed modules:
http://code.google.com/p/luaforwindows/

* Additionally, it's recommended that you use *git* to check out the repository
  and have git in the path of wherever you'll be running the build system
  from (so that build versions include the git rev)
** link:http://help.github.com/set-up-git-redirect[See GitHub's documentation]

Building
--------

If one is using a CodeRed-based development environment like
Precision32 on Windows, see "build_sim3u_dk.cmd" and
"build_sim3u_gs.cmd" for an example of running the build and
flashing. If the line endings are correct, on Windows with
LuaForWindows, the Precision32 IDE, and the line endings correct in
the script, it should be possible to simply double-click this script
from the platform directory and have a build and flash run.

* The "dk" variant configures pins/clocks for the development kit board.

* The "gs" variant configures for an alternate pin configuration.

On other platforms, the following should work from the base eLua
directory to generate elf and hex images:

----
lua build_elua.lua board=SIM3U1XX-B-DK allocator=multiple prog
----

Note on Git and Windows
-----------------------

The batch file mentioned above may need to have Windows/DOS line
endings to execute correctly.  These should be set automatically by
git if the checkout is done with the recommended autocrlf option:

----
git config --global core.autocrlf true
----



Port Notes
----------

Mapping of UARTS & USARTS to ids in eLua:

* USART0: 0
* USART1: 1
* UART0: 2
* UART1: 3

In addition a memory status function has been added to keep an eye on
heap allocation:

----
heap,inuse = elua.heapstats()
----

*heap*: size of total heap in bytes

*inuse*: bytes for current allocations within heap


Flashing
--------

In order to flash images using the Si32FlashUtility, it is currently
necessary to convert output hex files to use "extended linear
addressing" rather than "extended segment addressing" as is done
automatically by objtool.  The hex file can be converted using the
following command provided by
link:http://srecord.sourceforge.net/[srecord].

----
srec_cat elua_lua_sim3u167.hex -Intel -Output elua_lua_sim3u167_lin.hex -Intel
----

The default output mode for srecord's hex format is the extended
linear mode even though both output and input files are specified as
being in the same format.

Change Notes
------------

2012-04-05:

* add note on converting hex files

2012-04-04:

* Replaced linker script to get rid of separation between retention RAM & rest of memory

* Added elua.heapstats() function which returns current heap size & how much is in use
